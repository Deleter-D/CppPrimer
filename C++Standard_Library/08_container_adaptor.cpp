#include <iostream>
#include <stack>
#include <vector>
using namespace std;

// 所有容器适配器都要求容器具有添加、删除以及方便访问尾元素的的能力
int main(int argc, char const *argv[])
{
    stack<int> intStack;
    for (size_t ix = 0; ix != 10; ix++)
        intStack.push(ix);

    while (!intStack.empty())
    {
        int value = intStack.top();
        cout << value << endl;
        intStack.pop();
    }

    // 指定适配器的底层容器
    stack<int, vector<int>> intVecStack;

    return 0;
}

/*
                  所有容器适配器都支持的操作和类型
    ——————————————————————————————————————————————————————————
    size_type      | 一种类型，足以保存当前类型的最大对象的大小
    value_type     | 元素类型
    container_type | 实现适配器的底层容器类型
    ——————————————————————————————————————————————————————————
    A a;           | 创建一个名为a的空适配器
    A a(c);        | 创建一个名为a的适配器，带有容器c的一个拷贝
    ——————————————————————————————————————————————————————————
    关系运算符      | ==、!=、<、<=、>、>=，返回底层容器的比较结果
    ——————————————————————————————————————————————————————————
    a.empty()      | 若a包含任何元素，返回false，否则返回true
    a.size()       | 返回a中元素的数目
    swap(a, b)     | 交换a、b的内容，a、b必须具有相同类型
    a.swap(b)      | 底层容器类型也必须相同
    ——————————————————————————————————————————————————————————
*/

/*
                          栈特有的操作
    —————————————————————————————————————————————————————————
    栈默认基于deque实现，也可以在list或vector上实现
    —————————————————————————————————————————————————————————
    s.pop()         | 删除栈顶元素，但不返回该元素值
    s.push(item)    | 创建一个新元素压入栈顶
    s.emplace(args) | 该元素通过拷贝或移动item而来，或由args构造
    s.top()         | 返回栈顶元素，但不将该元素弹出
    —————————————————————————————————————————————————————————
*/

/*
                              队列和优先队列特有的操作
    —————————————————————————————————————————————————————————————————————————————
    queue默认基于deque实现，priority_queue默认基于vector实现
    queue也可以用list或vector实现，priority_queue也可以用deque实现
    —————————————————————————————————————————————————————————————————————————————
    q.pop()         | 返回queue首元素或priority_queue的最高优先级元素，但不删除此元素
    q.front()       | 返回首元素，但不删除此元素
    q.back()        | 返回尾元素，但不删除此元素，只适用于queue
    q.top()         | 返回最高优先级元素，但不删除此元素，只适用于priority_queue
    q.push(item)    | 在queue末尾或priority_queue的恰当位置创建一个元素
    q.emplace(args) | 该元素通过拷贝或移动item而来，或由args构造
    —————————————————————————————————————————————————————————————————————————————
*/