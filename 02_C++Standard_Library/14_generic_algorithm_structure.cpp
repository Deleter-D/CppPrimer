/*
                   算法要求的5个迭代器类别
    ——————————————————————————————————————————————————
    输入迭代器      | 只读，不写，单遍扫描，只能递增
    输出迭代器      | 只写，不读，单遍扫描，只能递增
    前向迭代器      | 可读写，多遍扫描，只能递增
    双向迭代器      | 可读写，多遍扫描，可递增递减
    随机访问迭代器  | 可读写，多遍扫描，支持全部迭代器运算
    ——————————————————————————————————————————————————
    输入迭代器：可以读取序列中的元素，必须支持：
    - 用于比较两个迭代器是否相等的运算符(==, !=)
    - 用于推进迭代器的前置和后置递增运算符(++)
    - 用于读取元素的解引用运算符(*)
    - 箭头运算符(->)
    输出迭代器：
    - 只支持递增、解引用和赋值
    vector、string和deque的迭代器：
    - 支持递减、关系和算术运算符
*/

/*
                算法形参模式
    —————————————————————————————————————
    alg(beg, end, otherArgs);
    alg(beg, end, dest, otherArgs);
    alg(beg, end, beg2, otherArgs);
    alg(beg, end, beg2, end2, otherArgs);
    —————————————————————————————————————
*/

/*
                      算法命名和重载规范
    ——————————————————————————————————————————————————————
    重载形式：
    unique(beg, end);       | 使用==运算符比较
    unique(beg, end, comp); | 使用comp比较
    ——————————————————————————————————————————————————————
    命名区分：
    find(beg, end, val);     | 查找值为val的第一个元素
    find_if(beg, end, pred); | 查找令pred为true的第一个元素
    ——————————————————————————————————————————————————————
    拷贝与否：
    reverse(beg, end);            | 翻转输入序列中的元素
    reverse_copy(beg, end, dest); | 将元素逆序拷贝至dest
    ——————————————————————————————————————————————————————
*/

// 特定容器算法
/*
                        list和forward_list成员函数版本算法
    ———————————————————————————————————————————————————————————————————————
    以下操作均返回void
    lst.merge(lst2)       | 将来自lst2的元素合并入lst，lst和lst2都必须是有序的
    lst.merge(lst2, comp) | 元素将从lst2中删除，在合并之后，lst2变为空
                          | 第一个版本使用<运算符，第二个版本使用给定的比较操作
    ———————————————————————————————————————————————————————————————————————
    lst.remove(val)       | 调用erase删除掉与给定值相等(==)
    lst.remove(pred)      | 或令一元谓词为真的每个元素
    ———————————————————————————————————————————————————————————————————————
    lst.reverse()         | 反转lst中元素的顺序
    ———————————————————————————————————————————————————————————————————————
    lst.sort()            | 使用<或给定的比较操作排序元素
    lst.sort(comp)        |
    ———————————————————————————————————————————————————————————————————————
    lst.unique()          | 调用erase删除同一个值的连续拷贝
    lst.unique(pred)      | 第一个版本使用==，第二个版本使用给定的二元谓词
    ———————————————————————————————————————————————————————————————————————
*/

/*
                    list和forward_list的splice成员函数参数
    —————————————————————————————————————————————————————————————————————
    splice算法是链表结构特有的，lst.splice(args)或flst.splice(args)
    —————————————————————————————————————————————————————————————————————
    (p, lst2)       |
        p是一个指向lst中元素的迭代器，或一个指向flst首前位置的迭代器
        函数将lst2的所有元素移动到lst中p之前的位置或是flst中p之后的位置
        将元素从lst2中删除，lst2的类型必须与lst或flst相同，且不能是同一个链表
    —————————————————————————————————————————————————————————————————————
    (p, lst2, p2)   | p2是一个指向lst2中位置的有效的迭代器
                    | 将p2指向的元素移动到lst中，或将p2之后的元素移动到flst中
                    | lst2可以是与lst或flst相同的链表
    —————————————————————————————————————————————————————————————————————
    (p, lst2, b, e) |
        b和e必须表示lst2中的合法范围，将给定范围中的元素从lst2移动到lst或flst
        lst2与lst(或flst)可以是相同的链表，但p不能指向给定范围中元素
    —————————————————————————————————————————————————————————————————————
*/